#NICO mimic controller generated by ChatGPT based on description from Connor Gaede
"""
Robot NICO is able to simulate mimic thanks to two 8x8 LED arrays simulating right and left eyebrow
and one 16x8 LED array simulating mouth. All three LED arrays are connected to Arduino board located
in robot NICO head. This Arduino is connected to controlling notebook via serial interface at COM4 port.
The notebook uses Windows 11 operating system and Python 3.12. Based on information below write program
in python which will allow to control mimic of the robot NICO: The eyebrows are 8x8 adafruit matrices
and the mouth is 16x8 matrix which are set as uint8_t bitmaps on the arduino side. The python side simply
writes utf8 encoded strings to the serial connection. There are hardcoded presets in the arduino code
if you simply write one of these to serial:
self._presets = ( "happiness", "sadness", "anger", "disgust", "surprise", "fear", "neutral", )
or "clear" to turn all LEDs off.
For custom bitmaps, we send:
"raw" + "l", "r" or "m" + bitmap encoded as 8 / 16 bytes i.e. "raw" + "l" + "FFFFFFFFFFFFFFFF" = "rawlFFFFFFFFFFFFFFFF"
to turn on all LED's of the left eyebrow.  
"""

import serial
import time

class NicoMimicController:
    def __init__(self, port='COM3', baudrate=9600):
        self.ser = serial.Serial(port, baudrate, timeout=1)
        time.sleep(2)  # Allow time for the connection to initialize
        self._presets = [
            "happiness",
            "sadness",
            "anger",
            "disgust",
            "surprise",
            "fear",
            "neutral",
        ]

    def send_preset(self, preset_name):
        if preset_name in self._presets:
            self.ser.write(preset_name.encode('utf-8'))
            print(f"Sent preset: {preset_name}")
        elif preset_name == "clear":
            self.ser.write("clear".encode('utf-8'))
            print("Cleared all LEDs")
        else:
            print(f"Invalid preset: {preset_name}")

    def send_raw(self, part, bitmap):
        if part not in ['l', 'r', 'm']:
            print("Invalid part. Use 'l' for left eyebrow, 'r' for right eyebrow, or 'm' for mouth.")
            return
        if not isinstance(bitmap, str) or len(bitmap) not in [16, 32]:
            print("Bitmap must be a 16 or 32 character string representing the LED pattern.")
            return
        command = f"raw{part}{bitmap}"
        self.ser.write(command.encode('utf-8'))
        print(f"Sent raw data to {part}: {bitmap}")

    def close(self):
        self.ser.close()
        print("Serial connection closed.")

# Usage example:
if __name__ == "__main__":
    controller = NicoMimicController()

    # Send a preset emotion
    controller.send_preset("happiness")
    time.sleep(0.2)
    controller.send_preset("sadness")
    time.sleep(0.2)
    controller.send_preset("anger")
    time.sleep(0.2)
    controller.send_preset("disgust")
    time.sleep(0.2)
    controller.send_preset("surprise")
    time.sleep(0.2)
    controller.send_preset("fear")
    time.sleep(0.2)
    controller.send_preset("neutral")
    time.sleep(0.2)

    # Send a raw bitmap for the left eyebrow
    controller.send_raw("l", "FF00FF00FF00FF00")
    time.sleep(0.01)
    # Send a raw bitmap for the right eyebrow
    controller.send_raw("r", "00FF00FF00FF00FF")
    time.sleep(0.01)
    # Send a raw bitmap for the mouth - Vampire :-)
    #                                     000102030405060708090A0B0C0D0E0F
    controller.send_raw("m", "0FFF0F030303030303030303030FFF0F")
    time.sleep(30)
    # Clear all LEDs
    controller.send_preset("clear")

    # Close the connection
    controller.close()
